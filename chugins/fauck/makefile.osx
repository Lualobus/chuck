
# faust file
FAUST_DSP?=fmv.dsp
FAUST_CPP=$(addsuffix .cpp,$(basename $(FAUST_DSP)))

# chugin name
CHUGIN_NAME?=$(addprefix Faust,$(basename $(FAUST_DSP)))

# all of the c/cpp files that compose this chugin
MODULES=$(FAUST_CPP)

# where the chuck source code is
CK_SRC_PATH=../../src

# you won't generally need to change anything below this line for a new chugin

# default: build a dynamic chugin
CK_CHUGIN_STATIC?=0

CHUGIN_PATH=/usr/lib/chuck

FLAGS=-m32 -D__MACOSX_CORE__ -I$(CK_SRC_PATH) -I. -D__CHUGIN_NAME__=$(CHUGIN_NAME)
LDFLAGS=-m32 -bundle -lstdc++

ifeq ($(CK_CHUGIN_STATIC),0)
SUFFIX=.chug
else
SUFFIX=.schug
FLAGS+= -D__CK_DLL_STATIC__
endif

ifneq ($(CHUCK_DEBUG),)
FLAGS+= -g
else
FLAGS+= -O3
endif

OBJECTS=$(addsuffix .o,$(basename $(MODULES)))
CHUG=$(addsuffix $(SUFFIX),$(CHUGIN_NAME))

all: $(CHUG)

$(CHUG): $(OBJECTS)
ifeq ($(CK_CHUGIN_STATIC),0)
	gcc $(LDFLAGS) -o $@ $?
else
	ar rv $@ $?
	ranlib $@
endif

$(OBJECTS): %.o: %.cpp $(CK_SRC_PATH)/chuck_dl.h
	gcc $(FLAGS) -c -o $@ $< 

$(FAUST_CPP): %.cpp: %.dsp fauck.cpp
	faust -a fauck.cpp -o $(FAUST_CPP) $(FAUST_DSP)

install: $(CHUG)
	mkdir -p $(CHUGIN_PATH)
	cp $^ $(CHUGIN_PATH)

clean: 
	rm -rf $(OBJECTS) $(CHUG)